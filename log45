# So.  Brainstorming.

## Fri Oct  4 18:43:07 EDT 2019
I sould start with nothning.  My orienteering game "wander" (that I wrote back many years in OCaml, a language that seems to be in vogue among some financial institutions and among theorem-provers in costructive mathematics) would fit the bill.  You start with nothing.  You run around and find eight markers (by running through them) and then you're done.

You end up with nothing.

Not quite.  You do start with a map.  It has all the markers on it, and the landscape, but it doesnt tell you where you are on it.  So that's the first thing to find out.

I guess you could start out without the map.  Maybe find it along the way?  Seem difficult.  One of the real hallmarks of that game was that it was extremely easy to get lost, even *with* the map.

I programmed that game on a square grid.

Now my other old game-like thing was a map generator.  I didn't use it in wander, but I've always thought I wanted to use it for this game.  I didn't because I had a hard enough time with the language and openGL.  That map was also on a suaare grid.  But I might like to redo it on a triangle grid -- for no reason other than that 3D graphics technology seems to ilke triangle meshes.

And I suspect that whatever I do this weekend, I'll be thinking of rewriting my orienteering game with more convincing landscape.  And if I do something else I'll find myself regretting that I didn't do this.


## Fri Oct  4 18:53:31 EDT 2019

The main projecte work so far would seem to be the fractal landscape generation.  I could bound the game by having it take place on an island.  I'd have to add serious amounts of water and coastline to the map generator then.  But the actual effort of walking through the map would be easier.  And the rivers would yield a natural maze.  I could even (if time permits) implement a few bridges for variety and trees to obfuscate the view.

Is this getting too ambitious for a weekend?  This as well as a fractal recursive fragmentation and recombining triangular tiles?

The triangle meshes could be a pair of rectangular arrays -- one for up-pointing triangles, and one for down-pointing triangles.  And originally, I had a lot of trouble with getting all the tiles to fit together properly.  But I could do some unit tests on them, which is what I eventually did with the square arrays anyway.

I have a feeling that there will be fewer different special cases with triangles than with the squares I once used.

## Fri Oct  4 19:11:43 EDT 2019

Looks like I've pretty well decided what I really want to do, whether I have time or not.

Time to start designing the geometry engine.
Time to start drawing triangles.  Wish I had paper with a grid of light blue triangles.  But no, it's not worth spending time on writing a postscipt program to do that.  Better just sketch with a pencil.


## Fri Oct  4 21:38:21 EDT 2019

Went to a Greek restaurant to think.  Ever notice that pizzas seem to be better in Greek restaurants than Italian ones?  I've always wondered about that.

Somehow writing diagrams and text on paper is easy to concentrate on when dining alone in a restaurant.  Someday I'll have to transcribe this into something ike SVG diagrams with text, or somehing like it to check in here.

I'll be using a somewhat rectanguar array of triangles.  There may be one array with two triangles in each slot (one pointing up and one down) or two arrays of homogeneously pointing triangles -- not decided.

Rivers flow along the edges of the triangles.

At each fractal subdivision step, each triangle gets chopped into six wedges, and then the wedges get fused with the corresponding wedges in neighbouring triangles to make new, smaller triangles.  Each such step the number of triangles increases by a factor of three (except for edge cases).

When this happens, the river flow long the edges of the bigger triangles gets to detour along the new edges of the smaller triangles.

The direction of flow will be determined by a height map -- providing a height for each vertex, and for the midpoint of each edge.

There will be a triangle subdivision transition that can create new river forks on occasion.

How to decide which detour the flow along the sides take?  Given a triangle with two flows on its edge, each one cahn detour through the triangle, or outside it.  This gives four possibilities.  I will select one of the two arrays of triangles (or pick the triangles pointing in some chosen same direction) and in each of those triangles, make the choice randomly.

There turn out to be one or two special cases  where choosing height of the vertices and edge midpoints isn't just a random interpolation.  I'll deal with those separately and make a river segment with both ends at the same height..

In the long run, if time and effort permit, I can convert those horizontal bits of river into lakes.

That determines the river network topology.  If time and effort permit, I can figure to draw the river segments as something other than straight lines.  But straight lines will have to do for now.

## Fri Oct  4 21:57:46 EDT 2019

Bedtime.  Tomorrow I start coding, and struggling with Javascript.
Maybe sleeping on it will give me some more ideas.

I'm quite happy with my accomplishments for these four hours.  I only hope that coding will go as smoothly.



## Sat Oct  5 20:05:51 EDT 2019

Spent the day struggling with a webgl tutorial and got it to display a rectangle, and then a triangle.  But in the tutorial I couldn't manage to identify what was general setup and what was the triangle.  I completely failed to draw a second triangle.

So I found another tutorial: https://webglfundamentals.org/

This one had more explanation as to what was going on.  I got to understand it a but, and I now have my own version of the tutorial's code that can draw two triangles.

Definite progress.

WHen I wanted to post this progress on the ldjam blog, I couldn't.  I could get it to provide a requestor for posting a new blog entry or cnceling, but clicking on the new blog entry option did noting.  Cancelling, of course, cancelled the attampt.



## Sat Oct  5 23:15:39 EDT 2019

I used a 'uniform' to set a colur for the triangle function.  I now draw two triangles of different colours.

I just noticed I can model the entire landscape in 3D and draw it in 2D.
That would mean I can work on the 3D modelling without having to immediately draw my triangles in 3D.


## Sun Oct  6 18:53:38 EDT 2019

It is now drawing river segments.  It doesn't look like much yet because the test map is completely random, and the river segments aren't even connected.  And something is wrong with the aspect ratio.

Drawing a right-angled 45 degree triangle is OK, so I've miscalculation the triangle coordinates.


# Mon Oct  7 12:44:56 EDT 2019

Well, landscape generation is well on its way.
I have maaged to do the geometric art of the fractal refinement.
There still remains the rivers.  And the height map.
I now figure I'll have the landscape generates completely by the end of the ludum dare, but I won't have the interaction -- I won't have the game.



